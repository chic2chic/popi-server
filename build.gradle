plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.20.0'
    id "org.sonarqube" version "6.0.1.5171"
    id 'jacoco'
}

bootJar.enabled = false

repositories {
    mavenCentral()
}

def jacocoExcludePatterns = [
        // 측정 안하고 싶은 패턴
        "**/*Application*",
        "**/*Config*",
        "**/*Exception*",
        "**/*Request*",
        "**/*Response*",
        "**/*Dto*",
        "**/*Filter*",
        "**/*Error*/**",
        "**/resources/**",
        "**/exception/**",
        "**/config/**",
        "**/controller/**",
        "**/*Oauth*",
        "**/*Auth*",
        "**/*Jwt*",
        "**/*Token*",
        "**/*Util*",
        "**/*Constants*",
        "**/*Role*"
]

sonar {
    properties {
        property "sonar.projectKey", "popi-official_popi-user-server"
        property "sonar.organization", "popi-official"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.exclusions', jacocoExcludePatterns.join(',')
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

def QDomains = []
for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
    QDomains.add(qPattern + '*')
}

subprojects {
    group = 'com.lgcns'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2024.0.0"
        }
    }

    spotless {
        java {
            // Google Java 포맷 적용
            /*
                googleJavaFormat() : 탭은 2개의 공백
                googleJavaFormat().aosp() : 탭은 4개의 공백
                [참고] https://github.com/google/google-java-format/issues/525
             */
            googleJavaFormat().aosp()
            // import 순서 정렬
            importOrder()
            // 사용하지 않는 import 제거
            removeUnusedImports()
            // 각 라인 끝에 있는 공백을 제거
            trimTrailingWhitespace()
            // 파일 끝에 새로운 라인 추가
            endWithNewline()
        }
    }


    jacoco {
        toolVersion = '0.8.12'
    }

    jacocoTestReport {
        dependsOn test
        reports {
            html.required.set(true)
            csv.required.set(true)
            xml.required.set(true)
        }

        afterEvaluate {
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains)
                    })
            )
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy(tasks.named('jacocoTestReport'))
    }
}

tasks.register('updateGitHooks', Copy) {
    from './scripts/pre-commit'
    into './.git/hooks'
}

tasks.register('makeGitHooksExecutable', Exec) {
    commandLine 'chmod', '+x', './.git/hooks/pre-commit'
    dependsOn updateGitHooks
}

compileJava.dependsOn makeGitHooksExecutable

tasks.named('test') {
    useJUnitPlatform()
}
